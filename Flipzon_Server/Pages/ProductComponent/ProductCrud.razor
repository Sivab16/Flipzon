@page "/product/create"
@page "/product/edit/{id:int}"
@inject IProductRepository _productRepository

@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

    <div class="col-12">
        @if (IsLoading)
        {
            <div class="text-md-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="CrudOperations">
                <DataAnnotationsValidator />
                 <div class="form-group">
                    <label>Name</label>
                    <ValidationMessage For="()=>Product.Name"></ValidationMessage>
                    <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    <br />
                    <label>Description</label>
                    <InputText @bind-Value="Product.Description" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Description"></ValidationMessage>

                </div>
                <br />
                <div class="form-group">
                    <button class="btn btn-primary"> @Title</button>
                    <NavLink href="product/Productlist" class="btn btn-secondary">Back to Product List</NavLink>
                </div>
            </EditForm>
        }

    </div>
</div>


@code {

    [Parameter]
    public int Id { get; set; }

    private ProductDTO Product { get; set; } = new ProductDTO();

    private string Title { get; set; } = "Create";

    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                IsLoading = false;
            }
            else
            {
                //update
                Title = "Update";
                await LoadCategories();
            }
        }

    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Product = await _productRepository.Get(Id);
        IsLoading = false;
        StateHasChanged();
    }



    public async Task CrudOperations()
    {
       
        if (Id == 0)
        {

            await _productRepository.Create(Product);

        }
        else
        {
            await _productRepository.Update(Product);
        }
        _navigationManager.NavigateTo("product/product");
    }

}
