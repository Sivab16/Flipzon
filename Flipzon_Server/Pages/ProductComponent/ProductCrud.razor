@page "/product/create"
@page "/product/edit/{id:int}"
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IFileUpload _fileUpload
@inject IJSRuntime _iJSRuntime

@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

    <div class="col-md-10">
        @if (IsLoading)
        {
            <div class="text-md-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="CrudOperations">
                <DataAnnotationsValidator />
                <div class="form-group col-6">
                    <div class="form-group">
                        <label>Name</label>
                        <ValidationMessage For="()=>Product.Name"></ValidationMessage>
                        <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    </div>
                </div>
                <div class="form-group col-6">
                    <div class="form-group">
                        <label>Color</label>
                        <InputText @bind-Value="Product.Color" class="form-control"></InputText>
                        <ValidationMessage For="()=>Product.Color"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group col-6">
                    <div class="form-group">
                        <label>Description</label>
                       @*  <SfRichTextEditor @bind-Value="Product.Description"></SfRichTextEditor> *@
                        <InputTextArea @bind-Value="Product.Description" class="form-control"></InputTextArea>
                        <ValidationMessage For="()=>Product.Description"></ValidationMessage>
                    </div>
                </div>


                <div class="row pt-3">
                    <div class="btn-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Shop Favourites</label>
                        </div>
                    </div>
                    <div class="btn-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Customer Favourites</label>
                        </div>
                    </div>
                    <div class="btn-group col-6">
                        <div class="form-group">
                        <label>Category</label>

                        <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected>Select Category</option>
                            @foreach (var item in CategoryList)
                            {
                                <option value="@item.Id"> @item.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
                        </div>
                       
                    </div>
                    <div class="form-group pt-6 col-6">
                        <InputFile OnChange="HandleFileUpload"> </InputFile>
                    </div>
                    
                </div>
                <br />

                <div class="form-group">
                    <button class="btn btn-primary"> @Title</button>
                    <NavLink href="product/Productlist" class="btn btn-secondary">Back to Product List</NavLink>
                </div>
            </EditForm>
        }

    </div>
    <div class="col-md-2">
     <img src="@Product.ImageUrl" class="w-100" />   
    </div>
</div>


@code {

    [Parameter]
    public int Id { get; set; }

    private ProductDTO Product { get; set; } = new ()
        {
            ImageUrl = "/images/Product/default.png"
        };

    private IEnumerable<CategoryDTO> CategoryList { get; set; } = new List<CategoryDTO>();

    private string Title { get; set; } = "Create";

    public bool IsLoading { get; set; }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }

    }


    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        CategoryList = await _categoryRepository.GetAll();
        if (Id != 0)
        {
            //update
            Title = "Update";
            Product = await _productRepository.Get(Id);
        }
        IsLoading = false;
        StateHasChanged();
    }



    public async Task CrudOperations()
    {
        IsLoading = true;

        if (Product.Id == 0)
        {

            await _productRepository.Create(Product);
            await _iJSRuntime.ToastrSuccess("Product Created Successfull");
        }
        else
        {
            await _productRepository.Update(Product);
            await _iJSRuntime.ToastrSuccess("Product Updated Successfull");
        }
        IsLoading = false;
        _navigationManager.NavigateTo("product/Productlist");
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;

        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                    fileInfo.Extension.ToLower() == ".png" ||
                    fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        Product.ImageUrl = await _fileUpload.Upload(file);
                        await _iJSRuntime.ToastrSuccess("Upload Successfull");
                    }
                    else
                    {

                        await _iJSRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");


                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            await _iJSRuntime.ToastrError(ex.Message);
        }
    }
}
