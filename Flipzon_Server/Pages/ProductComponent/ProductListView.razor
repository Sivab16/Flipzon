@page "/Product/Productlist"


@inject IProductRepository _productRepository

@inject IJSRuntime _jsRuntime

@inject IFileUpload _fileUpload

<_DeleteConfirmation IsProcessing=@IsLoading ConfirmationChanged="ConfirmDelete_Click"> </_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-info form-control"> Add New Product </a>
    </div>

    <div class="col-12">
        <br />
        @if (ProductList.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shop Favourites</th>
                        <th>Customer Favourites</th>
                        <th>Category</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var item in ProductList)
                    {
                        <tr>
                            <td>
                                @item.Name
                            </td>
                            <th>
                                <input type="checkbox" disabled checked="@item.ShopFavorites" />
                            </th>
                            <th>
                                <input type="checkbox" disabled checked="@item.CustomerFavorites" />
                            </th>
                            <th>
                                @item.Category.Name
                            </th>
                            <td>
                                <NavLink href="@($"product/edit/{item.Id}")" class="btn btn-primary">Edit</NavLink>
                                <NavLink href="@($"product/price/{item.Id}")" class="btn btn-success">Price</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandDelete(item.Id)">Delete</button>
                            </td>
                        </tr>
                        <br />

                        @* <SfGrid DataSource="@ProductList" AllowPaging="true">
                <GridPageSettings PageSize="5"></GridPageSettings>
                <GridColumns>
                <GridColumn Field=@nameof(item.Name) HeaderText="Name" TextAlign="TextAlign.Right" Width="50"></GridColumn>
                <GridColumn Field=@nameof(item.ShopFavorites) HeaderText="Shop favourites " Width="150"></GridColumn>
                <GridColumn Field=@nameof(item.CustomerFavorites) HeaderText="Customer favourites" Format="d" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                <GridColumn Field=@nameof(item.Description) HeaderText="Description" Type="ColumnType.TimeOnly" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                <GridColumn Field=@nameof(item.Color) HeaderText="Color" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                </GridColumns>
                </SfGrid> *@
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                <div class="text-md-center">
                    <img src="/images/loading.gif" />
                </div>

            }
            else
            {
                <p>no records</p>
            }

        }

    </div>
</div>


@code {
    public int DeleteProductId { get; set; } = 0;

    private IEnumerable<ProductDTO> ProductList { get; set; } = new List<ProductDTO>();


    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();

        }

    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        ProductList = await _productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();

    }

    private void HandDelete(int Id)
    {
        DeleteProductId = Id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteModal");
    }

    private async Task ConfirmDelete_Click(bool IsConfirm)
    {
        IsLoading = true;
        if (IsConfirm && DeleteProductId != 0)
        {
            ProductDTO produt = await _productRepository.Get(DeleteProductId);
            if (!produt.ImageUrl.Contains("default.png"))
            {

                _fileUpload.DeleteFile(produt.ImageUrl);
            }

            await _productRepository.Delete(DeleteProductId);
            await _jsRuntime.ToastrSuccess("Delete Successfull");
            await LoadProduct();
            await _jsRuntime.InvokeVoidAsync("HideDeleteModal");

            //popup message box
            //await _jsRuntime.InvokeAsync<bool>("confirm", "Delete Confirmed");
        }
        IsLoading = false;
    }


}
